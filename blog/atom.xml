<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Skye - TechBlog</title>
  
  <subtitle>Blog yourself</subtitle>
  <link href="https://flymaple.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://flymaple.github.io/blog/"/>
  <updated>2021-07-05T07:27:17.884Z</updated>
  <id>https://flymaple.github.io/blog/</id>
  
  <author>
    <name>Skye Wu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>遍歷非同步的方式記錄</title>
    <link href="https://flymaple.github.io/blog/2021/07/05/loop-with-async/"/>
    <id>https://flymaple.github.io/blog/2021/07/05/loop-with-async/</id>
    <published>2021-07-05T06:49:40.000Z</published>
    <updated>2021-07-05T07:27:17.884Z</updated>
    
    <content type="html"><![CDATA[<p>一般在使用 loop 的時候會習慣用到 for…of, array forEach …etc, 如果在這些程式碼段裡須搭配非同步(async)的時候會遇到一些問題</p><p>例如: 加了 async/await 沒有作用…</p><span id="more"></span><p>以下紀錄常用幾種 loop 方式搭配 async 得到的結果, 並額外介紹 async iterator</p><p>首先做個簡單的 delay 函式</p><figure class="highlight javascript"><figcaption><span>delay</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> resolve(), ms);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著針對我們常見的 for loop 來做紀錄, 以下幾中與 async/await 搭配的結果都是有效的</p><figure class="highlight javascript"><figcaption><span>for in</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async_await_for_in</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async_await_for_in &quot;</span>);</span><br><span class="line">  <span class="comment">// async/await can work!</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">in</span> list) &#123;</span><br><span class="line">    <span class="keyword">await</span> delay(<span class="number">500</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(list[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>for of</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async_await_for_of</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async_await_for_of &quot;</span>);</span><br><span class="line">  <span class="comment">// async/await can work!</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">of</span> list) &#123;</span><br><span class="line">    <span class="keyword">await</span> delay(<span class="number">500</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>for loop</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async_await_for_loop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async_await_for_loop&quot;</span>);</span><br><span class="line">  <span class="comment">// async/await can work!</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">    <span class="keyword">await</span> delay(<span class="number">500</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(list[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是針對陣列常用的 loop 方式, 與 async/await 搭配下都是<strong>無效</strong>的</p><figure class="highlight javascript"><figcaption><span>array forEach</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async_await_for_each</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async_await_for_each&quot;</span>);</span><br><span class="line">  <span class="comment">// async/await not work!</span></span><br><span class="line">  list.forEach(<span class="keyword">async</span> (item) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> delay(<span class="number">500</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>array map</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async_await_map</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async_await_map&quot;</span>);</span><br><span class="line">  <span class="comment">// async/await not work!</span></span><br><span class="line">  list.map(<span class="keyword">async</span> (item) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> delay(<span class="number">500</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>先將 iterator 做出來, 這邊做了函式型與類別型</p><figure class="highlight javascript"><figcaption><span>iterator</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMyIterator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    [<span class="built_in">Symbol</span>.asyncIterator]: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">next</span>: <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">          <span class="keyword">await</span> delay(<span class="number">500</span>);</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="built_in">Math</span>.random() &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyIterator</span> </span>&#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.asyncIterator]() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">next</span>: <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">await</span> delay(<span class="number">500</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="built_in">Math</span>.random() &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>做好之後就可以套用於 for 之中, 並搭配 <code>for await</code> 來進行非同步遍歷</p><figure class="highlight javascript"><figcaption><span>iterator with for await</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async_await_async_iterator1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async_await_async_iterator1&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> myIterator = customize.getMyIterator();</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> value <span class="keyword">of</span> myIterator) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (count &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    count += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async_await_async_iterator2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async_await_async_iterator2&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> myIterator = <span class="keyword">new</span> customize.MyIterator();</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> value <span class="keyword">of</span> myIterator) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (count &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    count += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程式碼: <a href="https://codesandbox.io/s/for-with-async-oi01x" target="_blank">點我</a></p><blockquote><ul><li><a href="https://segmentfault.com/a/1190000024567597">https://segmentfault.com/a/1190000024567597</a></li><li><a href="https://rs1987.medium.com/javascript-iterator-%E8%A3%BD%E4%BD%9C-6e3900f092c7">https://rs1987.medium.com/javascript-iterator-%E8%A3%BD%E4%BD%9C-6e3900f092c7</a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;一般在使用 loop 的時候會習慣用到 for…of, array forEach …etc, 如果在這些程式碼段裡須搭配非同步(async)的時候會遇到一些問題&lt;/p&gt;
&lt;p&gt;例如: 加了 async/await 沒有作用…&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://flymaple.github.io/blog/2021/07/05/hello-world/"/>
    <id>https://flymaple.github.io/blog/2021/07/05/hello-world/</id>
    <published>2021-07-05T06:46:41.763Z</published>
    <updated>2021-07-05T06:46:41.764Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hexo Theme 排行榜</title>
    <link href="https://flymaple.github.io/blog/2021/06/22/hexo-theme-rank/"/>
    <id>https://flymaple.github.io/blog/2021/06/22/hexo-theme-rank/</id>
    <published>2021-06-22T09:59:24.000Z</published>
    <updated>2021-07-05T06:46:41.785Z</updated>
    
    <content type="html"><![CDATA[<p>一開始只是想找個 hexo theme 來當作 Blog 的模板, 在網上看到有人針對 Github 星數的排行.</p><p>想說乾脆我也來用一個排行的文章, 剛好當作 blog 的一篇文章, 沒想到做著做著遇到好多沒碰過的東西, 原來給自己找了個苦差事呢.</p><span id="more"></span><h2 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h2><ul><li><p>有一個程式負責處理 github repositories data</p><ul><li>Query github repositories with github api</li><li>Export related to blog</li></ul></li><li><p>blog 的文章讀取上面程式來的資料</p></li></ul><h2 id="Implement"><a href="#Implement" class="headerlink" title="Implement"></a>Implement</h2><p>首先來實現資料來源的程式.</p><p>因為要抓取 github 的資料, 所以這裡使用公開且免費的 api, 只是有流量限制而已.</p><p>為了未來重複利用, 這邊直接把 github 相關的東西包成 module, 以便後續(未來)使用.</p><p>並且導入 axios 做為 request 的 library, 對於這個 github module 只是個雛形, 所以 function 沒有做全面, 只有針對要用的部分作一些設計.</p><pre><code class="typescript">import &#123;AxiosResponse&#125; from &#39;axios&#39;;import _axios from &#39;@axios&#39;;import &#123;RepositoriesResponse&#125; from &#39;./definition&#39;;// FIXME: currently for one topicfunction compileToQ(topic: string[]): string &#123;    return `topic:$&#123;encodeURIComponent(topic[0])&#125;`;&#125;// FIXME: input arguments interface typefunction getRepositories(&#123;    q,    topic,    per_page,    sort,&#125;: &#123;    q: string;    topic: string[];    per_page: number;    sort: &#39;stars&#39;;&#125;): Promise&lt;RepositoriesResponse&gt; &#123;    return axios        .get&lt;any, AxiosResponse&lt;RepositoriesResponse&gt;&gt;(&#39;/search/repositories&#39;, &#123;            params: &#123;                q: compileToQ(topic),                per_page,                sort,            &#125;,        &#125;)        .then(res =&gt; res.data);&#125;const axios = _axios.create(&#123;    baseURL: &#39;https://api.github.com/&#39;,    headers: &#123;Accept: &#39;application/vnd.github.v3+json&#39;&#125;,&#125;);const github = &#123;    getRepositories,&#125;;export default github;</code></pre><blockquote><p>主要對外公開 getRepositories 方便使用</p></blockquote><hr><p>有了 github module 以後就可以開始寫主程式啦!</p><p>主程式很簡單, 就分為兩個部分:</p><ul><li>查詢 topic: hexo-theme</li><li>將資料寫入檔案<ul><li>將 hexo project 的位置設定好(config file)</li><li>將資料寫入到指定位置</li></ul></li></ul><pre><code class="typescript">const YAML = require(&#39;json-to-pretty-yaml&#39;);import fs from &#39;fs&#39;;import path from &#39;path&#39;;import &#123;Repository&#125; from &#39;@github/definition&#39;;import config from &#39;./.config/hexo-theme-rank.json&#39;;import github from &#39;./github&#39;;async function getRepositories(): Promise&lt;Repository[]&gt; &#123;    return (await github.getRepositories(&#123;        q: &#39;&#39;,        topic: [&#39;hexo-theme&#39;],        per_page: 100,        sort: &#39;stars&#39;,    &#125;)).items.map(        repo =&gt; &#123;            return &#123; ... &#125;;        &#125;,    );&#125;function output(data: any): void &#123;&#125;async function main(): Promise&lt;void&gt; &#123;    const repositories = await getRepositories();    output(&#123; repositories, &#125;);&#125;main();</code></pre><blockquote><p>這裡看到寫出的時候將 json 轉為 yaml, 是因為 hexo 所吃的格式為 yaml</p></blockquote><p>到這邊已經完成一半了, 接下來開始在 blog 中將這份 yaml 資料讀入並且呈現出來.</p><hr><p>到這邊就開始踩雷了!!!</p><ul><li><p>post 怎麼讀取資料?</p><ul><li><p>hexo 有一個叫做 _data 的方式將資料讀入, 並且套用於模板之中(ejs, swig …etc)</p></li><li><p>_data 最後試出有分 global 和 post 的, 但是這只是用於定義在資料夾成面而已, 到最後 compile 都是會被包在 global variable 中, 如果是定義在 post 就會用 post 名稱被分在 global object 中的一個 attribute key 中</p><pre><code class="json">    &#123;        // 這是 post 名稱        &quot;hexo-theme-rank&quot;: &#123;            &quot;repositories&quot;: [...]        &#125;    &#125;</code></pre></li></ul></li><li><p>md 中怎麼寫 script 將這些資料 render 出來?</p><ul><li>找不到, 放棄…</li><li>直接對 next 這個 theme 做客製化, 因為是採用 swig template 又搞了好久的 try error</li></ul><pre><code class="swig">&#123;&#123; post.content &#125;&#125;&#123;############################################&#125;&#123;#  Customize: this is for Hexo Theme Rank  #&#125;&#123;############################################&#125;&#123;% if post.slug === 'hexo-theme-rank' %&#125;      &#123;&#123; hexo_theme_rank_list.render(page) &#125;&#125;  &#123;% endif %&#125;&#123;############################################&#125;</code></pre><pre><code class="swig">&#123;% macro render(post) %&#125;      &#123;% set repos = site.data['hexo-theme-rank'].repositories %&#125;      <style>          .&#123;&#123; post.slug &#125;&#125;.line &#123;              border-bottom: 1px dashed #ccc;              margin-bottom: 7px;          &#125;          .&#123;&#123; post.slug &#125;&#125;.date,          .&#123;&#123; post.slug &#125;&#125;.description &#123;              padding-left: 15px;          &#125;          .&#123;&#123; post.slug &#125;&#125;.date &#123;              font-size: 12px;              color: #737373;          &#125;      </style>      &#123;% for repo in repos.repositories %&#125;          <div class="&#123;&#123; post.slug &#125;&#125; line">              <a class="user" href="...          </div>      &#123;% endfor %&#125;  &#123;% endmacro %&#125;</code></pre><blockquote><p>這邊真的是雷爆了, 根本不會 swig, 硬是搞出來</p></blockquote></li></ul><hr><p>用完上面這些, 也就是你看到我正在寫文章的時候了, 文章就採用原先 hexo 的方式用 md 來撰寫.</p><p>在搭配 post.swig + list.swig 客製的部分將 repositories 動態 render 出來.</p><blockquote><p>有什麼正規的方式, 快點和我說阿… 難搞死了</p></blockquote><h2 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;一開始只是想找個 hexo theme 來當作 Blog 的模板, 在網上看到有人針對 Github 星數的排行.&lt;/p&gt;
&lt;p&gt;想說乾脆我也來用一個排行的文章, 剛好當作 blog 的一篇文章, 沒想到做著做著遇到好多沒碰過的東西, 原來給自己找了個苦差事呢.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>我的第一篇文章</title>
    <link href="https://flymaple.github.io/blog/2021/06/21/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>https://flymaple.github.io/blog/2021/06/21/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</id>
    <published>2021-06-21T15:53:46.000Z</published>
    <updated>2021-07-05T06:46:41.825Z</updated>
    
    <content type="html"><![CDATA[<pre><code class="html">lorem lorem lorem lorem lorem</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;lorem lorem lorem lorem lorem
&lt;/code&gt;&lt;/pre&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
