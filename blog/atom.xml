<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Skye - TechBlog</title>
  
  <subtitle>Blog yourself</subtitle>
  <link href="https://flymaple.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://flymaple.github.io/blog/"/>
  <updated>2021-07-23T09:23:21.331Z</updated>
  <id>https://flymaple.github.io/blog/</id>
  
  <author>
    <name>Skye Wu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Angular @Optional, @Self, @SkipSelf, @Host</title>
    <link href="https://flymaple.github.io/blog/2021/07/23/angular-resolution-modifiers/"/>
    <id>https://flymaple.github.io/blog/2021/07/23/angular-resolution-modifiers/</id>
    <published>2021-07-23T06:47:55.000Z</published>
    <updated>2021-07-23T09:23:21.331Z</updated>
    
    <content type="html"><![CDATA[<p>我們這次來介紹&quot;我&quot;不常用的 inject decorator</p><p>@Optional, @Self, @SkipSelf, @Host</p><span id="more"></span><h2 id="Injector-程式面說明-微模擬"><a href="#Injector-程式面說明-微模擬" class="headerlink" title="Injector 程式面說明 - 微模擬"></a>Injector 程式面說明 - 微模擬</h2><p>非實際 Angular 的運作模式, 單純模擬一下 injector 大概的理念</p><p>在 Component / Directive 中我們都會這樣子將 service 注入進來</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> logService: LogService</span>)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這裡很簡單的假裝有一個 LogService</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogService</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  log(message: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Angular 做 compile 的時候大概會將這些 service 放入到某個位置供 <code>Injector</code> 做使用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> injector = <span class="keyword">new</span> Injector([LogService, ..., ..., ..., ...]);</span><br></pre></td></tr></table></figure><p>我們來看一下 Injector 大概的長相</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Injector</span> </span>&#123;</span><br><span class="line">  <span class="comment">// provider 容器</span></span><br><span class="line">  <span class="keyword">private</span> container: <span class="built_in">Map</span>&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt; = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 當建立 Injector 的時候將 providers 放進容器內</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> providers: <span class="built_in">any</span>[] = []</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.providers.forEach(<span class="function">(<span class="params">provider</span>) =&gt;</span></span><br><span class="line">      <span class="built_in">this</span>.container.set(provider, <span class="keyword">new</span> provider())</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 各 Component / Directive 要使用的時候透過 get 的方式將這些 service 拿出來</span></span><br><span class="line">  get(service): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> instance = <span class="built_in">this</span>.container.get(service);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">&quot;Not provider found.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>各 Component / Directive 要使用的時候透過 get 的方式將這些 service 拿出來</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> logService: LogService</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.logService.log(<span class="string">&quot;I&#x27;m here.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Component(injector.get(LogService));</span><br></pre></td></tr></table></figure><p>程式碼: <a href="https://codesandbox.io/s/kind-black-ei67k?file=/src/app/injector-demo.ts" target="_blank">點我</a></p><blockquote><ul><li><a href="https://www.youtube.com/watch?v=G8zXugcYd7o">https://www.youtube.com/watch?v=G8zXugcYd7o</a></li></ul></blockquote><p>快速的了解 Injector 以後讓我們來看 Angular 關於 injector 的機制有哪些</p><h1 id="多級注入器-Hierarchical-injectors"><a href="#多級注入器-Hierarchical-injectors" class="headerlink" title="多級注入器(Hierarchical injectors)"></a>多級注入器(Hierarchical injectors)</h1><p>大致上分兩種類型注入:</p><ul><li>Element injector</li><li>Module injector</li></ul><h2 id="Element-injector"><a href="#Element-injector" class="headerlink" title="Element injector"></a>Element injector</h2><p>不是針對 module 去做 providers 設置, 而是在 Component / Directive 中的 meta 做 providers 設置, 這一類都屬於 Element injector</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">providers</span>: [LogService]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">TestComponent</span></span></span><br></pre></td></tr></table></figure><h2 id="Module-injector"><a href="#Module-injector" class="headerlink" title="Module injector"></a>Module injector</h2><p>我們常用的 <code>providedIn: &#39;root&#39;</code> 就是屬於 module injector, 另外也可以針對 module 類型的檔案就行 providers 的設置, 這也是 module injector</p><figure class="highlight typescript"><figcaption><span>@NgModule</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">providers: [&#123; <span class="attr">provide</span>: LocationStrategy, <span class="attr">useClass</span>: HashLocationStrategy &#125;];</span><br></pre></td></tr></table></figure><p>以上兩種 injector 是有先後順序的, 先由 Component / Directive 透過 Element injector 一層層往上找, 都找不到以後就會切換到 Module injector 一層層往上找, 直到噴出錯誤</p><p>下圖可以很清楚的看這個 flow</p><p><img src="pic1.png"></p><blockquote><ul><li><a href="https://www.youtube.com/watch?v=G8zXugcYd7o">https://www.youtube.com/watch?v=G8zXugcYd7o</a></li></ul></blockquote><p>以上的&quot;微&quot;模擬 Injector 是什麼, 以及 injectors 機制後就可以來介紹本篇的重點 Resolution Modifiers</p><h2 id="Optional"><a href="#Optional" class="headerlink" title="@Optional"></a>@Optional</h2><p>AppService 不設定 <code>providedIn</code></p><figure class="highlight typescript"><figcaption><span>AppService</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppService</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>在 Component / Directive 若要使用 AppService, 必須要在 meta 上定義 providers</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&quot;app-root&quot;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&quot;./app.component.html&quot;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&quot;./app.component.css&quot;</span>],</span><br><span class="line">  <span class="attr">providers</span>: [AppService]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> appService: AppService</span>)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>若 Component / Directive 忘了定義 providers 就使用的話會出現錯誤, 這時候可以用 <code>@Optional</code> 將這個 provider 設位選用, 也就是在 compile 的時候不會屬於必須</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&quot;app-root&quot;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&quot;./app.component.html&quot;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&quot;./app.component.css&quot;</span>],</span><br><span class="line">  <span class="attr">providers</span>: [AppService]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"><span class="meta">@Optional</span> <span class="keyword">private</span> appService: AppService</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.appService) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Self"><a href="#Self" class="headerlink" title="@Self"></a>@Self</h2><p>依照 Hierarchical injectors 機制, 會在 Component / Directive 本身的 providers 開始往上尋找直到 root.</p><p>若只要查找 Component / Directive 本身的 providers, 就可以使用 @Self, 找不到就直接報錯</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&quot;app-card-body&quot;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&quot;./card-body.component.html&quot;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&quot;./card-body.component.scss&quot;</span>]</span><br><span class="line">  <span class="attr">providers</span>: [CardService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CardBodyComponent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="meta">@Self</span>() <span class="keyword">private</span> cardService: CardService</span>)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>這些 Resolution modifiers 可以組合使用 <code>@Optional() @Self()</code></p></blockquote><h2 id="SkipSelf"><a href="#SkipSelf" class="headerlink" title="@SkipSelf"></a>@SkipSelf</h2><p>依照 Hierarchical injectors 中的機制, 會在 Component / Directive 本身的 providers 開始往上尋找直到 root.</p><p>若要從上一層開始到 root, 也就是跳過自身這層, 就可以使用 @SkipSelf</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&quot;app-card-body&quot;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&quot;./card-body.component.html&quot;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&quot;./card-body.component.scss&quot;</span>]</span><br><span class="line">  <span class="attr">providers</span>: [CardService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CardBodyComponent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="meta">@SkipSelf</span>() <span class="keyword">private</span> cardService: CardService</span>)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="Host"><a href="#Host" class="headerlink" title="@Host"></a>@Host</h2><p>這個是最為特別的一個 modifiers, 他不會遵循完整的 Hierarchical injectors 機制, 他只會查找 element 結構的範圍</p><p>下面可以看到 CardComponent 中的 template 結構, 包含 <code>app-card-body</code> 以及從上層來的 <code>ng-content</code></p><ul><li><code>app-card</code> 內含 <code>app-card-body</code></li><li><code>app-card</code> 包含上層來的 <code>app-card-test</code></li></ul><figure class="highlight html"><figcaption><span>CardComponent</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Card!<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-card-body</span>&gt;</span><span class="tag">&lt;/<span class="name">app-card-body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ng-content</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>app</code> 使用 <code>app-card</code> 並且傳入 <code>app-card-test</code> 進去</p><figure class="highlight html"><figcaption><span>上層 template</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-card</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-card-test</span>&gt;</span><span class="tag">&lt;/<span class="name">app-card-test</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">app-card</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>app-card</code> 設置了 CardService</p><figure class="highlight typescript"><figcaption><span>CardComponent</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&quot;app-card&quot;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&quot;./card.component.html&quot;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&quot;./card.component.scss&quot;</span>],</span><br><span class="line">  <span class="attr">providers</span>: [CardService]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CardComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> cardService: CardService</span></span></span><br><span class="line"><span class="params"><span class="function">  </span>)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p><code>app-card</code> 內含的 <code>app-body</code> 如果使用了 <code>@Host</code> 是找不到 <code>CardService</code> 的, 因為 <code>@Host</code> 會看到自己本身, 和 <code>@Self</code> 行為一樣要定義自身的 <code>providers</code> 才行</p><figure class="highlight typescript"><figcaption><span>CardBodyComponent</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&quot;app-card-body&quot;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&quot;./card-body.component.html&quot;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&quot;./card-body.component.scss&quot;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CardBodyComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="meta">@Optional</span>() <span class="meta">@Host</span>() <span class="keyword">private</span> cardService: CardService</span>)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p><code>app</code> 是將 <code>app-card-test</code> 傳到 <code>app-card</code> 裡面, 所以透過 <code>ng-content</code> 會使 <code>app-card-test</code> 隸屬於 <code>app-card</code>, 而不是被定義為 <code>app-card</code> 下面包含的內容, 隸屬的意思可以看做就是這個 <code>app-card</code> 本身的實例, 所以 <code>@Host</code> 等同於 <code>app-card</code>, 這時候就可以使用 <code>app-card</code> 提供的 <code>CardService</code> 了</p><figure class="highlight typescript"><figcaption><span>CardTestComponent</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&quot;app-card-test&quot;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&quot;./card-test.html&quot;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&quot;./card-test.scss&quot;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CardTestComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="meta">@Host</span>() <span class="keyword">private</span> cardService: CardService,</span></span></span><br><span class="line"><span class="params"><span class="function">  </span>)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>Angular 提供這四個 modifiers, 可以在不同情境中精準的設定出欲使用 provider, 但是一般的情況比較少會用到, 有個概念就好, 這樣在觀看網上的技術文章比較可以融會貫通, 而不是又多了一些看不懂的內容.</p><blockquote><ul><li><a href="https://www.youtube.com/watch?v=G8zXugcYd7o">https://www.youtube.com/watch?v=G8zXugcYd7o</a></li><li><a href="https://angular.io/guide/hierarchical-dependency-injection">https://angular.io/guide/hierarchical-dependency-injection</a></li><li><a href="https://angular.tw/guide/hierarchical-dependency-injection">https://angular.tw/guide/hierarchical-dependency-injection</a></li><li><a href="https://www.youtube.com/watch?v=uVGnsmm9g-I&amp;t=14s">https://www.youtube.com/watch?v=uVGnsmm9g-I&amp;t=14s</a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;我們這次來介紹&amp;quot;我&amp;quot;不常用的 inject decorator&lt;/p&gt;
&lt;p&gt;@Optional, @Self, @SkipSelf, @Host&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>FormControl 值的流向與變化</title>
    <link href="https://flymaple.github.io/blog/2021/07/20/form-control-set-value-and-value-changes/"/>
    <id>https://flymaple.github.io/blog/2021/07/20/form-control-set-value-and-value-changes/</id>
    <published>2021-07-20T07:35:47.000Z</published>
    <updated>2021-07-21T07:39:30.288Z</updated>
    
    <content type="html"><![CDATA[<p>你知道 value 在 FormControl 中是怎麼流動的嗎? 讓我們一步步的追蹤值的流向與變化吧</p><span id="more"></span><p>FormControl / FormGroup 都是繼承自 AbstractControl, 只是各自實作</p><p>本篇會先介紹 AbstractControl 中的 updateValueAndValidity, 並帶入大量的範例來幫助吸收</p><div class="sk-h1">updateValueAndValidity 解析</div><p>下面這一小段就是今天的主題, 會在程式中做分段說明, 並著重於今天的主題</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">updateValueAndValidity(opts: &#123;onlySelf?: <span class="built_in">boolean</span>, emitEvent?: <span class="built_in">boolean</span>&#125; = &#123;&#125;): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// 更新 FormControl 的狀態</span></span><br><span class="line">    <span class="built_in">this</span>._setInitialStatus();</span><br><span class="line">    <span class="comment">// 更新 FormControl 的值</span></span><br><span class="line">    <span class="built_in">this</span>._updateValue();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// FormControl 在啟用的狀態才會去相關的驗證</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.enabled) &#123;</span><br><span class="line">        <span class="built_in">this</span>._cancelExistingSubscription();</span><br><span class="line">        (<span class="built_in">this</span> <span class="keyword">as</span> &#123;<span class="attr">errors</span>: ValidationErrors | <span class="literal">null</span>&#125;).errors = <span class="built_in">this</span>._runValidator();</span><br><span class="line">        (<span class="built_in">this</span> <span class="keyword">as</span> &#123;<span class="attr">status</span>: <span class="built_in">string</span>&#125;).status = <span class="built_in">this</span>._calculateStatus();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.status === VALID || <span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">        <span class="built_in">this</span>._runAsyncValidator(opts.emitEvent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// [重點] emitEvent 影響 valueChanges &amp; statusChanges</span></span><br><span class="line">    <span class="keyword">if</span> (opts.emitEvent !== <span class="literal">false</span>) &#123;</span><br><span class="line">        (<span class="built_in">this</span>.valueChanges <span class="keyword">as</span> EventEmitter&lt;<span class="built_in">any</span>&gt;).emit(<span class="built_in">this</span>.value);</span><br><span class="line">        (<span class="built_in">this</span>.statusChanges <span class="keyword">as</span> EventEmitter&lt;<span class="built_in">string</span>&gt;).emit(<span class="built_in">this</span>.status);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// [重點] onlySelf 影響上層 FormControl</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>._parent &amp;&amp; !opts.onlySelf) &#123;</span><br><span class="line">        <span class="built_in">this</span>._parent.updateValueAndValidity(opts);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>經由上面的註解說明, 讓我們把程式焦點重新集中於以下內容</p><p><strong>值的更新 =&gt; 事件的觸發 =&gt; 上層更新觸發</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">updateValueAndValidity(opts: &#123;onlySelf?: <span class="built_in">boolean</span>, emitEvent?: <span class="built_in">boolean</span>&#125; = &#123;&#125;): <span class="built_in">void</span> &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新 FormControl 的值</span></span><br><span class="line">    <span class="built_in">this</span>._updateValue();</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// [重點] emitEvent 影響 valueChanges &amp; statusChanges</span></span><br><span class="line">    <span class="keyword">if</span> (opts.emitEvent !== <span class="literal">false</span>) &#123;</span><br><span class="line">        (<span class="built_in">this</span>.valueChanges <span class="keyword">as</span> EventEmitter&lt;<span class="built_in">any</span>&gt;).emit(<span class="built_in">this</span>.value);</span><br><span class="line">        (<span class="built_in">this</span>.statusChanges <span class="keyword">as</span> EventEmitter&lt;<span class="built_in">string</span>&gt;).emit(<span class="built_in">this</span>.status);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// [重點] onlySelf 影響上層 FormControl</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>._parent &amp;&amp; !opts.onlySelf) &#123;</span><br><span class="line">        <span class="built_in">this</span>._parent.updateValueAndValidity(opts);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原始碼: <a href="https://github.com/angular/angular/blob/d7e9d8746a47c689fd8014f3913c47c4d6692709/packages/forms/src/model.ts#L644" target="_blank">點我</a></p><div class="sk-h1">FormControl & FormGroup</div><p>FormGroup 可以乘載 FormControl, 理論上在 FormGroup 中的 setValue/patchValue 是輪巡其下 FormControl 的 setValue/patchValue 並加上一些本身的邏輯</p><div class="sk-h2">setValue</div><figure class="highlight typescript"><figcaption><span>FormControl.setValue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">setValue(value: <span class="built_in">any</span>, <span class="attr">options</span>: &#123;</span><br><span class="line">    onlySelf?: <span class="built_in">boolean</span>,</span><br><span class="line">    emitEvent?: <span class="built_in">boolean</span>,</span><br><span class="line">    emitModelToViewChange?: <span class="built_in">boolean</span>,</span><br><span class="line">    emitViewToModelChange?: <span class="built_in">boolean</span></span><br><span class="line">&#125; = &#123;&#125;): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// 更新值</span></span><br><span class="line">    (<span class="built_in">this</span> <span class="keyword">as</span> &#123;<span class="attr">value</span>: <span class="built_in">any</span>&#125;).value = <span class="built_in">this</span>._pendingValue = value;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// call updateValueAndValidity</span></span><br><span class="line">    <span class="built_in">this</span>.updateValueAndValidity(options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原始碼: <a href="https://github.com/angular/angular/blob/d7e9d8746a47c689fd8014f3913c47c4d6692709/packages/forms/src/model.ts#L1089" target="_blank">點我</a></p><figure class="highlight typescript"><figcaption><span>FormGroup.setValue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">setValue(value: &#123;[key: <span class="built_in">string</span>]: <span class="built_in">any</span>&#125;, <span class="attr">options</span>: &#123;onlySelf?: <span class="built_in">boolean</span>, emitEvent?: <span class="built_in">boolean</span>&#125; = &#123;&#125;): <span class="built_in">void</span> &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 輪巡 FormControl setValue</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(value).forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="built_in">this</span>.controls[name].setValue(value[name], &#123;<span class="attr">onlySelf</span>: <span class="literal">true</span>, <span class="attr">emitEvent</span>: options.emitEvent&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// updateValueAndValidity</span></span><br><span class="line">    <span class="built_in">this</span>.updateValueAndValidity(options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原始碼: <a href="https://github.com/angular/angular/blob/d7e9d8746a47c689fd8014f3913c47c4d6692709/packages/forms/src/model.ts#L1427" target="_blank">點我</a></p><blockquote><p>看起來和我們理解的差不多, 那我們繼續往下</p></blockquote><div class="sk-h2">patchValue</div><p>查閱原始碼發現 FormControl.patchValue 就只是多一層, 讓整體感覺都是使用一樣的開發模式</p><figure class="highlight typescript"><figcaption><span>FormControl.patchValue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">patchValue(value: <span class="built_in">any</span>, <span class="attr">options</span>: &#123;</span><br><span class="line">    onlySelf?: <span class="built_in">boolean</span>,</span><br><span class="line">    emitEvent?: <span class="built_in">boolean</span>,</span><br><span class="line">    emitModelToViewChange?: <span class="built_in">boolean</span>,</span><br><span class="line">    emitViewToModelChange?: <span class="built_in">boolean</span></span><br><span class="line">&#125; = &#123;&#125;): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setValue(value, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原始碼: <a href="https://github.com/angular/angular/blob/d7e9d8746a47c689fd8014f3913c47c4d6692709/packages/forms/src/model.ts#L1112" target="_blank">點我</a></p><blockquote><p>什麼都不做就轉呼叫到 FormControl.setValue 了</p></blockquote><figure class="highlight typescript"><figcaption><span>FormGroup.patchValue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">patchValue(value: &#123;[key: <span class="built_in">string</span>]: <span class="built_in">any</span>&#125;, <span class="attr">options</span>: &#123;onlySelf?: <span class="built_in">boolean</span>, emitEvent?: <span class="built_in">boolean</span>&#125; = &#123;&#125;): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// 輪巡 FormControl setValue</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(value).forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.controls[name]) &#123;</span><br><span class="line">        <span class="built_in">this</span>.controls[name].patchValue(value[name], &#123;<span class="attr">onlySelf</span>: <span class="literal">true</span>, <span class="attr">emitEvent</span>: options.emitEvent&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// updateValueAndValidity</span></span><br><span class="line">    <span class="built_in">this</span>.updateValueAndValidity(options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原始碼: <a href="https://github.com/angular/angular/blob/d7e9d8746a47c689fd8014f3913c47c4d6692709/packages/forms/src/model.ts#L1470" target="_blank">點我</a></p><blockquote><p>FormGroup.patchValue 基本上和 FormGroup.setValue 一模一樣, 少了一些全域的邏輯而以</p></blockquote><div class="sk-h2">讓我們整理一下上面所理解到的</div><p>順序: patchValue -&gt; setValue -&gt; updateValueAndValidity</p><div class="sk-h1">範例1</div><p>範例中有兩個 FormControl, firstName and lastName, 在這個範例中只會單純做 <code>setValue</code>, 並搭配 <code>emitEvent</code>、<code>onlySelf</code></p><p>訂閱 <code>valueChanges</code> 監看值的變化</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.firstName = <span class="keyword">new</span> FormControl();</span><br><span class="line"><span class="built_in">this</span>.lastName = <span class="keyword">new</span> FormControl();</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.firstName.valueChanges.subscribe(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`[firstName valueChange] firstName: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.lastName.valueChanges.subscribe(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`[lastName valueChange] lastName: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li>設置 firstName =&gt; Skye</li><li>設置 firstName =&gt; Kai, emitEvent =&gt; false</li><li>設置 lastName =&gt; Wu</li><li>設置 lastName =&gt; Ah, emitEvent =&gt; false</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  <span class="string">`[Global] firstName: <span class="subst">$&#123;<span class="built_in">this</span>.firstName.value&#125;</span>, lastName: <span class="subst">$&#123;<span class="built_in">this</span>.lastName.value&#125;</span>`</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.firstName.setValue(<span class="string">&quot;Skye&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  <span class="string">`[Global] firstName: <span class="subst">$&#123;<span class="built_in">this</span>.firstName.value&#125;</span>, lastName: <span class="subst">$&#123;<span class="built_in">this</span>.lastName.value&#125;</span>`</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.firstName.setValue(<span class="string">&quot;Kai&quot;</span>, &#123; <span class="attr">emitEvent</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  <span class="string">`[Global] firstName: <span class="subst">$&#123;<span class="built_in">this</span>.firstName.value&#125;</span>, lastName: <span class="subst">$&#123;<span class="built_in">this</span>.lastName.value&#125;</span>`</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.lastName.setValue(<span class="string">&quot;Wu&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  <span class="string">`[Global] firstName: <span class="subst">$&#123;<span class="built_in">this</span>.firstName.value&#125;</span>, lastName: <span class="subst">$&#123;<span class="built_in">this</span>.lastName.value&#125;</span>`</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.lastName.setValue(<span class="string">&quot;Ah&quot;</span>, &#123; <span class="attr">emitEvent</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  <span class="string">`[Global] firstName: <span class="subst">$&#123;<span class="built_in">this</span>.firstName.value&#125;</span>, lastName: <span class="subst">$&#123;<span class="built_in">this</span>.lastName.value&#125;</span>`</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;--&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  <span class="string">`firstName parent: <span class="subst">$&#123;<span class="built_in">this</span>.firstName.parent&#125;</span>, lastName parent: <span class="subst">$&#123;<span class="built_in">this</span>.lastName.parent&#125;</span>`</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>這裡可以先自己模擬一下, 會印出那些資訊, 其順序又為何</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先印出初始值</span></span><br><span class="line">[Global] firstName: null, lastName: null</span><br><span class="line"><span class="comment"># this.firstName.setValue(&quot;Skye&quot;);</span></span><br><span class="line">[firstName valueChange] firstName: Skye</span><br><span class="line">[Global] firstName: Skye, lastName: null</span><br><span class="line"><span class="comment"># this.firstName.setValue(&quot;Kai&quot;, &#123; emitEvent: false &#125;);</span></span><br><span class="line">[Global] firstName: Kai, lastName: null</span><br><span class="line"><span class="comment"># this.lastName.setValue(&quot;Wu&quot;);</span></span><br><span class="line">[lastName valueChange] lastName: Wu</span><br><span class="line">[Global] firstName: Kai, lastName: Wu</span><br><span class="line"><span class="comment"># this.lastName.setValue(&quot;Ah&quot;, &#123; emitEvent: false &#125;);</span></span><br><span class="line">[Global] firstName: Kai, lastName: Ah</span><br><span class="line">--</span><br><span class="line"><span class="comment"># 因為沒有 FormGroup, 所以 parent 為空, 也就不會再根據 onlySelf 呼叫 parent.updateValueAndValidity</span></span><br><span class="line">firstName parent: null, lastName parent: null</span><br></pre></td></tr></table></figure><blockquote><p>這個範例非常簡單, 就是 emitEvent 有無的差異, 會影響到 updateValueAndValidity 中的 emit 事件</p></blockquote><div class="sk-h1">範例2</div><p>這個範例之後都以 FormGroup + FormControl 來講解</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.firstName = <span class="keyword">new</span> FormControl();</span><br><span class="line"><span class="built_in">this</span>.lastName = <span class="keyword">new</span> FormControl();</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.formGroup = <span class="keyword">new</span> FormGroup(&#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="built_in">this</span>.firstName,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="built_in">this</span>.lastName,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>訂閱 FormGroup, 訂閱 FormControl 並印出當下 FormGroup 值的變化</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.formGroup.valueChanges.subscribe(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;[formGroup valueChanges]&quot;</span>, value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.firstName.valueChanges.subscribe(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    <span class="string">&quot;[firstName valueChange] firstName&quot;</span>,</span><br><span class="line">    value,</span><br><span class="line">    <span class="string">&quot;, [formGroup]&quot;</span>,</span><br><span class="line">    <span class="built_in">this</span>.formGroup.value</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.lastName.valueChanges.subscribe(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    <span class="string">&quot;[lastName valueChange] lastName&quot;</span>,</span><br><span class="line">    value,</span><br><span class="line">    <span class="string">&quot;, [formGroup]&quot;</span>,</span><br><span class="line">    <span class="built_in">this</span>.formGroup.value</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li>設置 firstName =&gt; Skye</li><li>設置 lastName =&gt; Wu</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.firstName.setValue(<span class="string">&quot;Skye&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.lastName.setValue(<span class="string">&quot;Wu&quot;</span>);</span><br></pre></td></tr></table></figure><p>這裡可以先自己模擬一下, 會印出那些資訊, 其順序又為何</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># this.firstName.setValue(&quot;Skye&quot;);</span></span><br><span class="line"><span class="comment"># firstName 改變了, 但是還未透過 parent.updateValueAndValidity 做上層更新, 所以 FormGroup 這個時間還不會變化</span></span><br><span class="line">[firstName valueChange] firstName Skye , [formGroup] &#123;firstName: null, lastName: null&#125;</span><br><span class="line"><span class="comment"># 當 firstName 變化完整結束後會執行 parent.updateValueAndValidity, 上層才會更新值</span></span><br><span class="line">[formGroup valueChanges] &#123;firstName: <span class="string">&quot;Skye&quot;</span>, lastName: null&#125;</span><br><span class="line"><span class="comment"># this.lastName.setValue(&quot;Wu&quot;);</span></span><br><span class="line"><span class="comment"># lastName 改變了, 但是還未透過 parent.updateValueAndValidity 做上層更新, 所以 FormGroup 這個時間還不會變化</span></span><br><span class="line">[lastName valueChange] lastName Wu , [formGroup] &#123;firstName: <span class="string">&quot;Skye&quot;</span>, lastName: null&#125;</span><br><span class="line"><span class="comment"># 當 lastName 變化完整結束後會執行 parent.updateValueAndValidity, 上層才會更新值</span></span><br><span class="line">[formGroup valueChanges] &#123;firstName: <span class="string">&quot;Skye&quot;</span>, lastName: <span class="string">&quot;Wu&quot;</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>這個範例開始著重於 FormControl value 變化的時間點, 以及 FormGroup value 變化的時間點</p></blockquote><div class="sk-h1">範例3</div><p>延續範例 2, 將 emitEvent、onlySelf 放進來</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.formGroup.valueChanges.subscribe(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;[formGroup valueChanges]&quot;</span>, value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.firstName.valueChanges.subscribe(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    <span class="string">&quot;[firstName valueChange] firstName&quot;</span>,</span><br><span class="line">    value,</span><br><span class="line">    <span class="string">&quot;, [formGroup]&quot;</span>,</span><br><span class="line">    <span class="built_in">this</span>.formGroup.value</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.lastName.valueChanges.subscribe(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    <span class="string">&quot;[lastName valueChange] lastName&quot;</span>,</span><br><span class="line">    value,</span><br><span class="line">    <span class="string">&quot;, [formGroup]&quot;</span>,</span><br><span class="line">    <span class="built_in">this</span>.formGroup.value</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.firstName.setValue(<span class="string">&quot;Skye&quot;</span>, &#123; <span class="attr">onlySelf</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.lastName.setValue(<span class="string">&quot;Wu&quot;</span>, &#123; <span class="attr">emitEvent</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;[formGroup valueChanges]&quot;</span>, <span class="built_in">this</span>.formGroup.value);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;--&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;reset |&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.formGroup.setValue(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="literal">null</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">emitEvent</span>: <span class="literal">false</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;[formGroup valueChanges]&quot;</span>, <span class="built_in">this</span>.formGroup.value);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.formGroup.setValue(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="literal">null</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">emitEvent</span>: <span class="literal">false</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.formGroup.setValue(&#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&quot;Skye&quot;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&quot;Wu&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>這裡可以先自己模擬一下, 會印出那些資訊, 其順序又為何</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># this.firstName.setValue(&quot;Skye&quot;, &#123; onlySelf: true &#125;);</span></span><br><span class="line"><span class="comment"># firstName 改變了, 但是給了 onlySelf: true, 所以不會更新上層</span></span><br><span class="line">[firstName valueChange] firstName Skye , [formGroup] &#123;firstName: null, lastName: null&#125;</span><br><span class="line"><span class="comment"># this.lastName.setValue(&quot;Wu&quot;, &#123; emitEvent: false &#125;);</span></span><br><span class="line"><span class="comment"># lastName 改變了, 但是給了 emitEvent: false, 所以不會觸發 updateValueAndValidity 中的 emit</span></span><br><span class="line"><span class="comment"># 所以不會值行 lastName valueChange 訂閱事件</span></span><br><span class="line"><span class="comment"># 當 lastName 變化完整結束後會執行 parent.updateValueAndValidity, 上層才會更新值</span></span><br><span class="line">[formGroup valueChanges] &#123;firstName: <span class="string">&quot;Skye&quot;</span>, lastName: <span class="string">&quot;Wu&quot;</span>&#125;</span><br><span class="line">--</span><br><span class="line">reset |</span><br><span class="line"><span class="comment"># 重設</span></span><br><span class="line">[formGroup valueChanges] &#123;firstName: null, lastName: null&#125;</span><br><span class="line"><span class="comment"># firstName 改變了, 但是還未透過 parent.updateValueAndValidity 做上層更新, 所以 FormGroup 這個時間還不會變化</span></span><br><span class="line">[firstName valueChange] firstName Skye , [formGroup] &#123;firstName: null, lastName: null&#125;</span><br><span class="line"><span class="comment"># lastName 改變了, 但是還未透過 parent.updateValueAndValidity 做上層更新, 所以 FormGroup 這個時間還不會變化</span></span><br><span class="line">[lastName valueChange] lastName Wu , [formGroup] &#123;firstName: null, lastName: null&#125;</span><br><span class="line"><span class="comment"># 當 FormGroup setValue 完整結束後會執行才會執行本身的 updateValueAndValidity, 相關的值才會更新, 以及事件的觸發</span></span><br><span class="line">[formGroup valueChanges] &#123;firstName: <span class="string">&quot;Skye&quot;</span>, lastName: <span class="string">&quot;Wu&quot;</span>&#125;</span><br></pre></td></tr></table></figure><div class="sk-h1">範例4</div><p>這個範例是最為複雜的一個例子, 建議拿出紙筆稍微紀錄個步驟的變化, 因為有兩個變化題互相交互的問題</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.formGroup.valueChanges.subscribe(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;[formGroup valueChanges]&quot;</span>, value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.firstName.valueChanges</span><br><span class="line">  <span class="comment">// 這裡做個變化題: 在 firstName 更新以後, 自動變更 firstName 為 f_Kai</span></span><br><span class="line">  .pipe(tap(<span class="function">() =&gt;</span> <span class="built_in">this</span>.firstName.setValue(<span class="string">&quot;f_Kai&quot;</span>, &#123; <span class="attr">emitEvent</span>: <span class="literal">false</span> &#125;)))</span><br><span class="line">  .subscribe(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      <span class="string">&quot;[firstName valueChange] firstName&quot;</span>,</span><br><span class="line">      value,</span><br><span class="line">      <span class="string">&quot;, [formGroup]&quot;</span>,</span><br><span class="line">      <span class="built_in">this</span>.formGroup.value</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.lastName.valueChanges</span><br><span class="line">  <span class="comment">// 這裡做個變化題: 在 lastName 更新以後, 自動變更 firstName 為 l_Kai</span></span><br><span class="line">  .pipe(tap(<span class="function">() =&gt;</span> <span class="built_in">this</span>.firstName.setValue(<span class="string">&quot;l_Kai&quot;</span>)))</span><br><span class="line">  .subscribe(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      <span class="string">&quot;[lastName valueChange] lastName&quot;</span>,</span><br><span class="line">      value,</span><br><span class="line">      <span class="string">&quot;, [formGroup]&quot;</span>,</span><br><span class="line">      <span class="built_in">this</span>.formGroup.value</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;[formGroup valueChanges]&quot;</span>, <span class="built_in">this</span>.formGroup.value);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.formGroup.setValue(&#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&quot;Skye&quot;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&quot;Wu&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>這裡可以先自己模擬一下, 會印出那些資訊, 其順序又為何</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始值</span></span><br><span class="line">[formGroup valueChanges] &#123;firstName: null, lastName: null&#125;</span><br><span class="line"><span class="comment"># firstName 改變了, 會先觸發 valueChange, 在整個流程尚未結束前會碰到一個變化題:</span></span><br><span class="line">[firstName valueChange] firstName Skye , [formGroup] &#123;firstName: <span class="string">&quot;f_Kai&quot;</span>, lastName: null&#125;</span><br><span class="line"><span class="comment"># this.firstName.setValue(&quot;f_Kai&quot;, &#123; emitEvent: false &#125;) 值變, 但是不會觸發 valueChange</span></span><br><span class="line"><span class="comment"># 因為值變了, 所以現在 FormGroup 已被更新, 會是 &#123;firstName: &quot;f_Kai&quot;, lastName: null&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># firstName 更新完了以後換 listName</span></span><br><span class="line"><span class="comment"># listName 更新完了以後會碰到另一個變化題(2):</span></span><br><span class="line"><span class="comment"># this.firstName.setValue(&quot;l_Kai&quot;)</span></span><br><span class="line"><span class="comment"># 所以會先跑 firstName 的值變與 valueChange</span></span><br><span class="line"><span class="comment"># 然後這裡又會碰到 firstName 的變化題(1):</span></span><br><span class="line"><span class="comment"># this.firstName.setValue(&quot;f_Kai&quot;, &#123; emitEvent: false &#125;) 值變, 但是不會觸發 valueChange</span></span><br><span class="line"><span class="comment"># 所以這行的 valueChange 會是 (2) 所觸發的</span></span><br><span class="line">[firstName valueChange] firstName l_Kai , [formGroup] &#123;firstName: <span class="string">&quot;f_Kai&quot;</span>, lastName: <span class="string">&quot;Wu&quot;</span>&#125;</span><br><span class="line"><span class="comment"># 因為 (2) 的變化題完整結束後會執行 parent.updateValueAndValidity, 上層會更新值</span></span><br><span class="line">[formGroup valueChanges] &#123;firstName: <span class="string">&quot;f_Kai&quot;</span>, lastName: <span class="string">&quot;Wu&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># lastName 變化題結束以後, 就會回到原先的 valueChanges</span></span><br><span class="line">[lastName valueChange] lastName Wu , [formGroup] &#123;firstName: <span class="string">&quot;f_Kai&quot;</span>, lastName: <span class="string">&quot;Wu&quot;</span>&#125;</span><br><span class="line"><span class="comment"># 最後 FormGroup setValue 完整結束後就會觸發回 FormGroup valueChanges</span></span><br><span class="line">[formGroup valueChanges] &#123;firstName: <span class="string">&quot;f_Kai&quot;</span>, lastName: <span class="string">&quot;Wu&quot;</span>&#125;</span><br></pre></td></tr></table></figure><div class="sk-h1">範例5</div><p>做一個延遲值變的變化題</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.formGroup.valueChanges.subscribe(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;[formGroup valueChanges]&quot;</span>, value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.firstName.valueChanges</span><br><span class="line">  .pipe(</span><br><span class="line">    switchMap(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> timer(<span class="number">1000</span>).pipe(</span><br><span class="line">        take(<span class="number">1</span>),</span><br><span class="line">        tap(<span class="function">() =&gt;</span></span><br><span class="line">          <span class="built_in">this</span>.lastName.setValue(<span class="string">&quot;Zue&quot;</span>, &#123;</span><br><span class="line">            <span class="attr">emitEvent</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">onlySelf</span>: <span class="literal">true</span>,</span><br><span class="line">          &#125;)</span><br><span class="line">        )</span><br><span class="line">      );</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">  .subscribe(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      <span class="string">&quot;[firstName valueChange] firstName&quot;</span>,</span><br><span class="line">      value,</span><br><span class="line">      <span class="string">&quot;, [formGroup]&quot;</span>,</span><br><span class="line">      <span class="built_in">this</span>.formGroup.value</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.lastName.valueChanges.subscribe(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    <span class="string">&quot;[lastName valueChange] lastName&quot;</span>,</span><br><span class="line">    value,</span><br><span class="line">    <span class="string">&quot;, [formGroup]&quot;</span>,</span><br><span class="line">    <span class="built_in">this</span>.formGroup.value</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;[formGroup]&quot;</span>, <span class="built_in">this</span>.formGroup.value);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.formGroup.setValue(&#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&quot;Skye&quot;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&quot;Wu&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>這裡可以先自己模擬一下, 會印出那些資訊, 其順序又為何</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始值</span></span><br><span class="line">[formGroup] &#123;firstName: null, lastName: null&#125;</span><br><span class="line"><span class="comment"># firstName 值變了, 但是在 valueChange 做一個延遲變化, 所以不會看到 valueChange 的 log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># firstName 更新完以後換 lastName, 但是還未透過 parent.updateValueAndValidity 做上層更新, 所以 FormGroup 這個時間還不會變化</span></span><br><span class="line">[lastName valueChange] lastName Wu , [formGroup] &#123;firstName: null, lastName: null&#125;</span><br><span class="line"><span class="comment"># FormGroup setValue 完整結束後會執行 updateValueAndValidity, 會觸發 valueChanges</span></span><br><span class="line">[formGroup valueChanges] &#123;firstName: <span class="string">&quot;Skye&quot;</span>, lastName: <span class="string">&quot;Wu&quot;</span>&#125;</span><br><span class="line"><span class="comment"># 1秒後變化題結束, 但是變化題中帶有 &#123;onlySelf: true, emitEvent: false&#125;</span></span><br><span class="line"><span class="comment"># 所以只會偷偷的變更 firstName 的值, 且不會發出任何 emit, 也不會通知 parent 做 updateValueAndValidity</span></span><br><span class="line"><span class="comment"># 變化題結束後原始的 firstName valueChanges 才會出現</span></span><br><span class="line">[firstName valueChange] firstName 0 , [formGroup] &#123;firstName: <span class="string">&quot;Skye&quot;</span>, lastName: <span class="string">&quot;Wu&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果這時候再執行 formGroup.updateValueAndValidity() 會看到值為 &#123;firstName: &quot;Skye&quot;, lastName: &quot;Wu&quot;&#125;</span></span><br><span class="line"><span class="comment"># 因為 Zue 這個值是被變化題所更新, 但是因為設定了 onlySelf: true, 所以不會更新到 parent</span></span><br><span class="line"><span class="comment"># 現在手動值行 formGroup.updateValueAndValidity, 就會將這個值更新進來了</span></span><br></pre></td></tr></table></figure><div class="sk-h1">總結</div><p>範例稍微複雜了一些, 但是如果真的理解 updateValueAndValidity 其中的邏輯順序, 就可以融會貫通 FormGroup / FormControl 變化的時間點.</p><p>在較複雜的多欄位交互中可能因為使用了大量的 setValue + valueChanges, 導致出現雷點或鬼打牆的問題, 通常就是這篇提到的邏輯所導致的.</p><p>欄位交互的方式很多種, 如果習慣用 Angular form 的開發者, 還是稍微理解一下這些流向會比較好唷.</p><p>全範例: <a href="https://codesandbox.io/s/form-control-value-flow-rhn0t" target="_blank">點我</a></p><hr><p>本篇起源是源自 <a href="https://blog.kevinyang.net/2020/04/20/angular-form-valuechanges/">https://blog.kevinyang.net/2020/04/20/angular-form-valuechanges/</a></p><p>其範例較為精簡, 很推薦唷!</p><blockquote><ul><li><a href="https://angular.tw/api/forms/FormControl">https://angular.tw/api/forms/FormControl</a></li><li><a href="https://blog.kevinyang.net/2020/04/20/angular-form-valuechanges/">https://blog.kevinyang.net/2020/04/20/angular-form-valuechanges/</a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;你知道 value 在 FormControl 中是怎麼流動的嗎? 讓我們一步步的追蹤值的流向與變化吧&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>米家到貨通知啦</title>
    <link href="https://flymaple.github.io/blog/2021/07/19/mi-out-of-stock-with-dev-tools/"/>
    <id>https://flymaple.github.io/blog/2021/07/19/mi-out-of-stock-with-dev-tools/</id>
    <published>2021-07-19T06:09:43.000Z</published>
    <updated>2021-07-19T06:24:22.637Z</updated>
    
    <content type="html"><![CDATA[<p>原本就常常缺貨的小米, 又趕上 COVID-19 全民在家運動, 想買幾瓶 &quot;米家自動感應洗手機&quot;</p><p>缺貨! 缺貨!! 大缺貨!!!</p><span id="more"></span><p>尤其是發起團購以後才發現缺貨, 實在是讓人心急如焚 இдஇ</p><p>之前剛好有寫類似的到貨通知, 就直接 copy 過來稍做修改啦</p><div class="sk-h1">直接開始吧</div><p>先讓瀏覽器開啟通知的功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Notification.requestPermission(<span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Notification.permission !== status) &#123;</span><br><span class="line">    Notification.permission = status;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><div class="sk-h1">Fetch</div><p>直接用 DevTools 幫我產生 fetch script 就好, 實在很懶得動腦了</p><p>都是一些很常用的寫法</p><ul><li>fetch</li><li>DOMParser</li><li>selector</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fetch(<span class="string">&quot;https://buy.mi.com/tw/item/3203600057&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="attr">accept</span>:</span><br><span class="line">        <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;</span>,</span><br><span class="line">      <span class="string">&quot;accept-language&quot;</span>: <span class="string">&quot;zh-TW,zh;q=0.9,en-US;q=0.8,en;q=0.7&quot;</span>,</span><br><span class="line">      <span class="string">&quot;cache-control&quot;</span>: <span class="string">&quot;max-age=0&quot;</span>,</span><br><span class="line">      <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">      <span class="string">&quot;sec-ch-ua&quot;</span>:</span><br><span class="line">        <span class="string">&#x27;&quot; Not;A Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;91&quot;, &quot;Chromium&quot;;v=&quot;91&quot;&#x27;</span>,</span><br><span class="line">      <span class="string">&quot;sec-ch-ua-mobile&quot;</span>: <span class="string">&quot;?0&quot;</span>,</span><br><span class="line">      <span class="string">&quot;sec-fetch-dest&quot;</span>: <span class="string">&quot;document&quot;</span>,</span><br><span class="line">      <span class="string">&quot;sec-fetch-mode&quot;</span>: <span class="string">&quot;navigate&quot;</span>,</span><br><span class="line">      <span class="string">&quot;sec-fetch-site&quot;</span>: <span class="string">&quot;same-origin&quot;</span>,</span><br><span class="line">      <span class="string">&quot;sec-fetch-user&quot;</span>: <span class="string">&quot;?1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;upgrade-insecure-requests&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">referrer</span>: <span class="string">&quot;https://www.coolpc.com.tw/evaluate.php&quot;</span>,</span><br><span class="line">    <span class="attr">referrerPolicy</span>: <span class="string">&quot;strict-origin-when-cross-origin&quot;</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;cors&quot;</span>,</span><br><span class="line">    <span class="attr">credentials</span>: <span class="string">&quot;include&quot;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res.text();</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> dp = <span class="keyword">new</span> DOMParser();</span><br><span class="line">      <span class="keyword">const</span> doc = dp.parseFromString(data, <span class="string">&quot;text/html&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> match = <span class="built_in">Array</span>.from(</span><br><span class="line">        doc.querySelectorAll(<span class="string">&#x27;[type=&quot;text/javascript&quot;]&#x27;</span>)</span><br><span class="line">      ).find(<span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s.innerHTML.match(<span class="string">&#x27;IsCos: \\&quot;0\\&quot;&#x27;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (match) &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(<span class="string">&quot;小米有貨囉, 快去看!!!&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.warn(<span class="string">&quot;程式已停止, 請重新啟動.&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Notification(<span class="string">&quot;小米有貨囉, 快去看!!!&quot;</span>);</span><br><span class="line">        <span class="built_in">clearInterval</span>(interval.id);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>各個商品頁是採用 Server render 的方式直接將畫面做呈現, 所以沒有 api 可以用, 一樣直接用 html parse 的方式下手</li></ul></blockquote><div class="sk-h1">小技巧</div><p>在分析網頁的時候有看到變數直接代表有無商品, 直接拿來用就好, 超方便~</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> match = <span class="built_in">Array</span>.from(doc.querySelectorAll(<span class="string">&#x27;[type=&quot;text/javascript&quot;]&#x27;</span>)).find(</span><br><span class="line">  <span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> s.innerHTML.match(<span class="string">&#x27;IsCos: \\&quot;0\\&quot;&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><ul><li>變數藏在 script tag 裡面, 把它們抓出來在用 regex 判斷就好囉~</li></ul></blockquote><blockquote><p>寫好的隔天就被通知貨到了, 立馬加入購物車下單, 實在是有爽度!</p></blockquote><p>程式碼: <a href="https://gist.github.com/FlyMaple/9030c78b68b31a15772d6ce0cf8291ef" target="_blank">點我</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;原本就常常缺貨的小米, 又趕上 COVID-19 全民在家運動, 想買幾瓶 &amp;quot;米家自動感應洗手機&amp;quot;&lt;/p&gt;
&lt;p&gt;缺貨! 缺貨!! 大缺貨!!!&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>這年頭買張顯示卡有這麼難?</title>
    <link href="https://flymaple.github.io/blog/2021/07/19/coolpc-with-dev-tools/"/>
    <id>https://flymaple.github.io/blog/2021/07/19/coolpc-with-dev-tools/</id>
    <published>2021-07-19T03:38:26.000Z</published>
    <updated>2021-07-19T06:04:20.902Z</updated>
    
    <content type="html"><![CDATA[<p>電腦壞掉又遇到礦災, 不就是要買張顯卡而已, 有沒有這麼難買…</p><span id="more"></span><p>一直以來都講求 CP 為主的我, 只不過是要買張中階顯卡就好, 孰不知這個時間點 啥卡都買不到..</p><p>什麼 RTX2060 RTX2070 都不是我要的阿, 我只是要張 1650 super, 線上估價平台沒貨就是沒貨</p><p>手刷也會累, 就寫個小程式幫我做這些工作吧!</p><div class="sk-h1">直接開始吧</div><p>先讓瀏覽器開啟通知的功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Notification.requestPermission(<span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Notification.permission !== status) &#123;</span><br><span class="line">    Notification.permission = status;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><div class="sk-h1">Fetch</div><p>直接用 DevTools 幫我產生 fetch script 就好, 實在很懶得動腦了</p><p>都是一些很常用的寫法</p><ul><li>fetch</li><li>DOMParser</li><li>selector</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fetch(<span class="string">&quot;https://www.coolpc.com.tw/evaluate.php&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="attr">accept</span>:</span><br><span class="line">        <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;</span>,</span><br><span class="line">      <span class="string">&quot;accept-language&quot;</span>: <span class="string">&quot;zh-TW,zh;q=0.9,en-US;q=0.8,en;q=0.7&quot;</span>,</span><br><span class="line">      <span class="string">&quot;cache-control&quot;</span>: <span class="string">&quot;max-age=0&quot;</span>,</span><br><span class="line">      <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">      <span class="string">&quot;sec-ch-ua&quot;</span>:</span><br><span class="line">        <span class="string">&#x27;&quot; Not;A Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;91&quot;, &quot;Chromium&quot;;v=&quot;91&quot;&#x27;</span>,</span><br><span class="line">      <span class="string">&quot;sec-ch-ua-mobile&quot;</span>: <span class="string">&quot;?0&quot;</span>,</span><br><span class="line">      <span class="string">&quot;sec-fetch-dest&quot;</span>: <span class="string">&quot;document&quot;</span>,</span><br><span class="line">      <span class="string">&quot;sec-fetch-mode&quot;</span>: <span class="string">&quot;navigate&quot;</span>,</span><br><span class="line">      <span class="string">&quot;sec-fetch-site&quot;</span>: <span class="string">&quot;same-origin&quot;</span>,</span><br><span class="line">      <span class="string">&quot;sec-fetch-user&quot;</span>: <span class="string">&quot;?1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;upgrade-insecure-requests&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">referrer</span>: <span class="string">&quot;https://www.coolpc.com.tw/evaluate.php&quot;</span>,</span><br><span class="line">    <span class="attr">referrerPolicy</span>: <span class="string">&quot;strict-origin-when-cross-origin&quot;</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;cors&quot;</span>,</span><br><span class="line">    <span class="attr">credentials</span>: <span class="string">&quot;include&quot;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> contentType = res.headers.get(<span class="string">&quot;content-type&quot;</span>);</span><br><span class="line">      <span class="keyword">const</span> charsetMatches = contentType.match(<span class="regexp">/charset=(.+)/</span>);</span><br><span class="line">      <span class="keyword">const</span> charset = charsetMatches[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">return</span> res.blob().then(<span class="function">(<span class="params">blob</span>) =&gt;</span> readBlobAsText(blob, charset));</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> dp = <span class="keyword">new</span> DOMParser();</span><br><span class="line">      <span class="keyword">const</span> doc = dp.parseFromString(data, <span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">      <span class="keyword">const</span> list = <span class="built_in">Array</span>.from(</span><br><span class="line">        doc.querySelectorAll(<span class="string">&#x27;[label=&quot;NVIDIA GTX1650 SUPER (DDR6)&quot;] option&#x27;</span>)</span><br><span class="line">      ).filter(<span class="function">(<span class="params">opt</span>) =&gt;</span> !opt.innerText.trim().startsWith(<span class="string">&quot;❤&quot;</span>));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (list.length) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;\n\n---&quot;</span>);</span><br><span class="line">        list.map(<span class="function">(<span class="params">opt</span>) =&gt;</span> <span class="built_in">console</span>.warn(opt.innerText.trim()));</span><br><span class="line">        <span class="keyword">new</span> Notification(<span class="string">&quot;有貨, 快去看!!!&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>小東西就不用串接一堆系統, 直接用瀏覽器的通知就好, 簡單好用!</li><li>判斷顯示卡有沒有貨的方式也寫得很簡單, 因為都沒貨阿…, 以後拿來在細修也很快!</li></ul></blockquote><div class="sk-h1">編碼小雷點</div>這邊有一個小雷點就是, fetch 拿回來的資料會有編碼問題, 所以會看到 response 亂碼呈現<p>在 Stackoverflow 找到的方法就直接拿來用啦</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readBlobAsText = <span class="function">(<span class="params">blob, encoding</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fr = <span class="keyword">new</span> FileReader();</span><br><span class="line">    fr.onload = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">      resolve(fr.result);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    fr.onerror = <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      reject(err);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    fr.readAsText(blob, encoding);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>到貨通知是寫好了… 但是還是沒貨阿= =</p></blockquote><p>程式碼: <a href="https://gist.github.com/FlyMaple/d943757ef8f7cd89ca3ba213764fd5a0" target="_blank">點我</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;電腦壞掉又遇到礦災, 不就是要買張顯卡而已, 有沒有這麼難買…&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Angular forwardRef 所謂何事?</title>
    <link href="https://flymaple.github.io/blog/2021/07/16/angular-what-is-forward-ref/"/>
    <id>https://flymaple.github.io/blog/2021/07/16/angular-what-is-forward-ref/</id>
    <published>2021-07-16T09:23:50.000Z</published>
    <updated>2021-07-16T09:40:36.948Z</updated>
    
    <content type="html"><![CDATA[<p>在 Angular 中常常會看到各式各樣的教學文, 其中有個字眼不會常常看, 也不會常常寫, 那就是 forwardRef.</p><span id="more"></span><p>通常這種東西不是一知半解就是複製貼上, 因緣際會之下好像稍微理解了一點, 下面來寫些紀錄以免忘記了.</p><div class="sk-h1">各式各樣的使用場景</div><p>常見的使用情境如下, 但是卻會看到 forwardRef 不斷的出現</p><div class="sk-h4">Inject token</div><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">constructor</span>(<span class="params"><span class="meta">@Inject</span>(forwardRef(() =&gt; Lock)) lock: Lock</span>) &#123;</span><br></pre></td></tr></table></figure><div class="sk-h4">ControlValueAccessor 之 NG_VALUE_ACCESSOR</div><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    <span class="attr">selector</span>: <span class="string">&#x27;byte-input-field&#x27;</span>,</span><br><span class="line">    <span class="attr">templateUrl</span>: <span class="string">&#x27;./byte-input-field.component.html&#x27;</span>,</span><br><span class="line">    <span class="attr">styleUrls</span>: [<span class="string">&#x27;./byte-input-field.component.scss&#x27;</span>],</span><br><span class="line">    <span class="attr">providers</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">provide</span>: NG_VALUE_ACCESSOR,</span><br><span class="line">            <span class="attr">useExisting</span>: forwardRef(<span class="function">() =&gt;</span> ByteInputFieldComponent),</span><br><span class="line">            <span class="attr">multi</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteInputFieldComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br></pre></td></tr></table></figure><div class="sk-h1">模擬個情境</div><p>這裡我們先忘記上面所說的東西</p><div class="sk-h4">以常見的 function 舉例</div><p>如果有一個 function Accessor, 他需要傳入一個值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Accessor</span>(<span class="params">something</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Uncaught ReferenceError: InputField is not defined</span></span><br><span class="line">Accessor(InputField);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> InputField = &#123;&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>在第 6 行的地方會使用到 InputField 這個變數, 但是尚未定義所以報錯了, 這裡不會自動提權的原因我猜想是會”直接”被用於編譯</p></blockquote><p>如果把 InputField 丟在最上方, 就不會有未定義的情況發生</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> InputField = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Accessor</span>(<span class="params">something</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Accessor(InputField);</span><br></pre></td></tr></table></figure><blockquote><p>但這是理想, 也是在單一檔案中很好控制的時候; 在使用各式各樣框架的時候, 不見得你會理解他的編譯順序與核心邏輯, 這種問題就會有機率的發生</p></blockquote><div class="sk-h4">以較複雜的 class 舉例</div><p>class Accessor 需要接收外部來的 class, 並且在 toString 中 new 出這個外部 class 並且回傳 name attribute.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Accessor</span> </span>&#123;</span><br><span class="line">  useComponent;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">useComponent</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.useComponent = useComponent;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">this</span>.useComponent().name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Uncaught ReferenceError: Cannot access &#x27;InputField&#x27; before initialization</span></span><br><span class="line"><span class="keyword">const</span> inputFieldAccessor = <span class="keyword">new</span> Accessor(InputField);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputField</span> </span>&#123;</span><br><span class="line">  name = <span class="string">&quot;InputField&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>這裡發生的錯誤和 function 舉例一樣, 都是為定義前使用</p></blockquote><div class="sk-h1">修正這些情境</div><p>以閉包(Closure)參照的概念來修正這個報錯的狀況</p><div class="sk-h4">function</div><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forwardRef</span>(<span class="params">forwardRefFn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> forwardRefFn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Accessor</span>(<span class="params">something</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Accessor(forwardRef(<span class="function">() =&gt;</span> InputField));</span><br></pre></td></tr></table></figure><blockquote><p>神奇的事情發生了, 運用閉包的特性, 在呼叫 Accessor 的時候並不會直接編譯到 InputField, 而是先判讀這是一個 function, 等到實際用到 InputField 的時候才是以閉包的方式取回來</p></blockquote><div class="sk-h4">class</div><p>這邊將 class Accessor 稍微修改一下, 讓他可以接收 class 或是 function</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forwardRef</span>(<span class="params">forwardRefFn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> forwardRefFn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Accessor</span> </span>&#123;</span><br><span class="line">  useComponent;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">useComponent</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.useComponent = useComponent;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> comp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.useComponent <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span><br><span class="line">      comp = <span class="keyword">new</span> (<span class="built_in">this</span>.useComponent())();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      comp = <span class="keyword">new</span> <span class="built_in">this</span>.useComponent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> comp.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Accessor(forwardRef(<span class="function">() =&gt;</span> InputField));</span><br><span class="line"><span class="keyword">new</span> Accessor(forwardRef(<span class="function">() =&gt;</span> TextArea));</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputField</span> </span>&#123;</span><br><span class="line">  name = <span class="string">&quot;InputField&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextArea</span> </span>&#123;</span><br><span class="line">  name = <span class="string">&quot;TextArea&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>這邊的錯誤也消失了, 一樣是運用閉包的效果</p></blockquote><div class="sk-h1">讓我們回到正題</div><p>以上這些例子都了解以後在來看這些例子就很清楚啦~</p><p>其實就是在 Angular 裡面, 在這些地方需要傳入 class 的時候會發生尚未定義的問題, 所以才用閉包的方式來處理</p><p>你看~ 是不是一通百通了呢</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">forwardRef(<span class="function">() =&gt;</span> Lock);</span><br><span class="line">forwardRef(<span class="function">() =&gt;</span> ByteInputFieldComponent);</span><br></pre></td></tr></table></figure><p>程式碼: <a href="https://codepen.io/flymaple/pen/dyvKGLN" target="_blank">點我</a></p><blockquote><ul><li><a href="https://indepth.dev/posts/1133/what-is-forwardref-in-angular-and-why-we-need-it">https://indepth.dev/posts/1133/what-is-forwardref-in-angular-and-why-we-need-it</a></li><li><a href="https://koding.work/use-forwardref-to-resolve-bug-in-angular/">https://koding.work/use-forwardref-to-resolve-bug-in-angular/</a></li><li><a href="https://github.com/angular/angular/blob/b5ab7aff433a67cddaa55e621d17b1a1b07b57c2/packages/forms/src/directives/reactive_directives/form_control_directive.ts">https://github.com/angular/angular/blob/b5ab7aff433a67cddaa55e621d17b1a1b07b57c2/packages/forms/src/directives/reactive_directives/form_control_directive.ts</a></li><li><a href="https://github.com/angular/angular/blob/b5ab7aff433a67cddaa55e621d17b1a1b07b57c2/packages/forms/src/directives/reactive_directives/form_control_name.ts">https://github.com/angular/angular/blob/b5ab7aff433a67cddaa55e621d17b1a1b07b57c2/packages/forms/src/directives/reactive_directives/form_control_name.ts</a></li><li><a href="https://github.com/angular/angular/blob/b5ab7aff433a67cddaa55e621d17b1a1b07b57c2/packages/forms/src/directives/ng_model.ts">https://github.com/angular/angular/blob/b5ab7aff433a67cddaa55e621d17b1a1b07b57c2/packages/forms/src/directives/ng_model.ts</a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 Angular 中常常會看到各式各樣的教學文, 其中有個字眼不會常常看, 也不會常常寫, 那就是 forwardRef.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Angular style component host 與封裝對照</title>
    <link href="https://flymaple.github.io/blog/2021/07/09/angular-style-host/"/>
    <id>https://flymaple.github.io/blog/2021/07/09/angular-style-host/</id>
    <published>2021-07-09T08:18:21.000Z</published>
    <updated>2021-07-09T08:47:25.024Z</updated>
    
    <content type="html"><![CDATA[<div class="sk-h2">什麼是 :host(selector) ?</div><p>在 Angular component 中的樣式, 基本上會被 Shadow dom 所隔離, 在 Shadow dom 之中才會是 template 的內容.</p><p>樣式中的 host 其實就是指向 Shadow dom, 也就是在父層 template 中所呼叫的 component tag.</p><p>一般會將樣式寫在 template 上而不會對 host 進行太多的定義.</p><div class="sk-h3">那什麼時候會需要將樣式定義在 host 上呢?</div><p>Shadow dom 的大小基本上是由其中的 template 所決定, 但是如果要對這個 component 有較精準的定位或相對位置計算等空間排版的需求時, 會需要將 host 定義 display 屬性</p><span id="more"></span><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:host</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>只針對 template 要達到精準的排版是不太夠的, 要先將其 host 設定好才不會遇到太多鬼打牆的問題, 例如明明設定了但是沒用的狀況…</p></blockquote><div class="sk-h3">:host 用與不用的差別</div>因為 host 層級屬於父層, 要定義 host style 只能由 component :host 所定義, 不然就必須由父層所覆寫<hr><div class="sk-h2">什麼是 :host-context(selector)</div><p>如果是樣式排版需要依照上層來做到自動變化, 可以透過 :host-context 來達到目的, 而不是由父層強制覆寫 component 樣式.</p><p>如果是單純調整顏色等已定義好的屬性值, 可以將這些屬性值改由 css variable 的方式來傳遞變化, 而不是濫用 :host-context 來覆寫本身的樣式</p><p>這是由 component 往上查找 <strong>theme=”theme-*“</strong> 的用法</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:host</span>-context([theme=&quot;theme-red&quot;]) &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:host</span>-context([theme=&quot;theme-green&quot;]) &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.25rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:host</span>-context([theme=&quot;theme-blue&quot;]) &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>:host-context 可以由這個 component 往上查找</p></blockquote><hr><div class="sk-h2">透過 @HostBinding 來進行屬性綁定</div><p>綁定 component attribute 來達到自動寫入 host 屬性.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Theme = <span class="string">&quot;theme-default&quot;</span> | <span class="string">&quot;theme-red&quot;</span> | <span class="string">&quot;theme-green&quot;</span> | <span class="string">&quot;theme-blue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">    <span class="meta">@HostBinding</span>(<span class="string">&quot;attr.theme&quot;</span>)</span><br><span class="line">    <span class="attr">bg</span>: Theme = <span class="string">&quot;theme-default&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依照 bg 這個屬性自動綁入 host 的 theme 屬性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-root</span> <span class="attr">theme</span>=<span class="string">&quot;theme-default&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或是利用 method 來做到複雜的判斷來寫入 host 屬性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HostBinding</span>(<span class="string">&#x27;class.highlighted&#x27;</span>)</span><br><span class="line">highlighted(): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.xxx.yyy.zzz.highlighted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依照 highlighted 這個函式自動綁入 host 的 class --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-root</span> <span class="attr">class</span>=<span class="string">&quot;highlighted&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS Variable<br>在父層定義好各種不同類型的 variable, 就可以由上而下的往各 component 傳遞</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:host</span>([theme=&quot;theme-default&quot;]) &#123;</span><br><span class="line">  --bg: <span class="number">#a9a9a9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:host</span>([theme=&quot;theme-red&quot;]) &#123;</span><br><span class="line">  --bg: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:host</span>([theme=&quot;theme-green&quot;]) &#123;</span><br><span class="line">  --bg: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><div class="sk-h2">來看看四散各處的樣式 compile 後的程式碼</div><p>這是 styles.scss</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::ng-deep h1 &#123;</span><br><span class="line">  margin: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>compile 後</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::ng-deep h1 &#123;</span><br><span class="line">  margin: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li><p>因為 styles.scss 是一個全域的樣式檔, 所以不會套用到 shadow dom 的樣式封裝</p></li><li><p>即使加了 ::ng-deep 穿透封裝, 也不會有任何作用, 單純的 compile 出來而已</p></li></ul></blockquote><p>這是 app-component.scss</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.app-component</span> &#123;</span><br><span class="line">  <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ::ng-deep h1 &#123;</span><br><span class="line">    margin: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>compile 後</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.app-component</span><span class="selector-attr">[_ngcontent-tpg-c0]</span> <span class="selector-tag">h1</span><span class="selector-attr">[_ngcontent-tpg-c0]</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.app-component</span><span class="selector-attr">[_ngcontent-tpg-c0]</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li><p>如果是 component style 的話就會被 shadow dom 封裝樣式, 會看到 <strong>[_ngcontent-xxx-xxx</strong> 這種自動產生的名稱</p></li><li><p>使用 ::ng-deep 目的是使其穿透到下層, 所以不會再套用到 <strong>[_ngcontent-xxx-xxx</strong></p></li></ul><p>ps. 這邊兩段的優先權會採取 selector 較為清楚 第一段</p></blockquote><p>這是 app-component.scss 下的 tile.component.scss</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:host</span> &#123;</span><br><span class="line">  <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::ng-deep &#123;</span><br><span class="line">  h1 &#123;</span><br><span class="line">    margin: <span class="number">2px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>compile 後</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[_nghost-mhs-c1]</span> <span class="selector-tag">h1</span><span class="selector-attr">[_ngcontent-mhs-c1]</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-attr">[_ngcontent-mhs-c1]</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>寫在 :host 內也是會被 compile 出封裝後的樣式 - 直接寫在 scss 內, 沒有任何嵌套也是會 compile 出封裝後的樣式 - 如果使用 ::ng-deep 來進行穿透就會突破封裝, 進而引起反寫覆蓋全域的風險</li></ul></blockquote><p>程式碼: <a href="https://codesandbox.io/s/angular-style-component-host-g228y" target="_blank">點我</a></p><blockquote><p><a href="https://indepth.dev/posts/1469/techniques-to-style-component-host-element-in-angular">https://indepth.dev/posts/1469/techniques-to-style-component-host-element-in-angular</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;sk-h2&quot;&gt;什麼是 :host(selector) ?&lt;/div&gt;

&lt;p&gt;在 Angular component 中的樣式, 基本上會被 Shadow dom 所隔離, 在 Shadow dom 之中才會是 template 的內容.&lt;/p&gt;
&lt;p&gt;樣式中的 host 其實就是指向 Shadow dom, 也就是在父層 template 中所呼叫的 component tag.&lt;/p&gt;
&lt;p&gt;一般會將樣式寫在 template 上而不會對 host 進行太多的定義.&lt;/p&gt;
&lt;div class=&quot;sk-h3&quot;&gt;那什麼時候會需要將樣式定義在 host 上呢?&lt;/div&gt;

&lt;p&gt;Shadow dom 的大小基本上是由其中的 template 所決定, 但是如果要對這個 component 有較精準的定位或相對位置計算等空間排版的需求時, 會需要將 host 定義 display 屬性&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>遍歷非同步的方式記錄</title>
    <link href="https://flymaple.github.io/blog/2021/07/05/loop-with-async/"/>
    <id>https://flymaple.github.io/blog/2021/07/05/loop-with-async/</id>
    <published>2021-07-05T06:49:40.000Z</published>
    <updated>2021-07-05T07:27:17.884Z</updated>
    
    <content type="html"><![CDATA[<p>一般在使用 loop 的時候會習慣用到 for…of, array forEach …etc, 如果在這些程式碼段裡須搭配非同步(async)的時候會遇到一些問題</p><p>例如: 加了 async/await 沒有作用…</p><span id="more"></span><p>以下紀錄常用幾種 loop 方式搭配 async 得到的結果, 並額外介紹 async iterator</p><p>首先做個簡單的 delay 函式</p><figure class="highlight javascript"><figcaption><span>delay</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> resolve(), ms);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著針對我們常見的 for loop 來做紀錄, 以下幾中與 async/await 搭配的結果都是有效的</p><figure class="highlight javascript"><figcaption><span>for in</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async_await_for_in</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async_await_for_in &quot;</span>);</span><br><span class="line">  <span class="comment">// async/await can work!</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">in</span> list) &#123;</span><br><span class="line">    <span class="keyword">await</span> delay(<span class="number">500</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(list[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>for of</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async_await_for_of</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async_await_for_of &quot;</span>);</span><br><span class="line">  <span class="comment">// async/await can work!</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">of</span> list) &#123;</span><br><span class="line">    <span class="keyword">await</span> delay(<span class="number">500</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>for loop</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async_await_for_loop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async_await_for_loop&quot;</span>);</span><br><span class="line">  <span class="comment">// async/await can work!</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">    <span class="keyword">await</span> delay(<span class="number">500</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(list[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是針對陣列常用的 loop 方式, 與 async/await 搭配下都是<strong>無效</strong>的</p><figure class="highlight javascript"><figcaption><span>array forEach</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async_await_for_each</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async_await_for_each&quot;</span>);</span><br><span class="line">  <span class="comment">// async/await not work!</span></span><br><span class="line">  list.forEach(<span class="keyword">async</span> (item) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> delay(<span class="number">500</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>array map</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async_await_map</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async_await_map&quot;</span>);</span><br><span class="line">  <span class="comment">// async/await not work!</span></span><br><span class="line">  list.map(<span class="keyword">async</span> (item) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> delay(<span class="number">500</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>先將 iterator 做出來, 這邊做了函式型與類別型</p><figure class="highlight javascript"><figcaption><span>iterator</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMyIterator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    [<span class="built_in">Symbol</span>.asyncIterator]: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">next</span>: <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">          <span class="keyword">await</span> delay(<span class="number">500</span>);</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="built_in">Math</span>.random() &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyIterator</span> </span>&#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.asyncIterator]() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">next</span>: <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">await</span> delay(<span class="number">500</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="built_in">Math</span>.random() &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>做好之後就可以套用於 for 之中, 並搭配 <code>for await</code> 來進行非同步遍歷</p><figure class="highlight javascript"><figcaption><span>iterator with for await</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async_await_async_iterator1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async_await_async_iterator1&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> myIterator = customize.getMyIterator();</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> value <span class="keyword">of</span> myIterator) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (count &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    count += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async_await_async_iterator2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async_await_async_iterator2&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> myIterator = <span class="keyword">new</span> customize.MyIterator();</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> value <span class="keyword">of</span> myIterator) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (count &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    count += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程式碼: <a href="https://codesandbox.io/s/for-with-async-oi01x" target="_blank">點我</a></p><blockquote><ul><li><a href="https://segmentfault.com/a/1190000024567597">https://segmentfault.com/a/1190000024567597</a></li><li><a href="https://rs1987.medium.com/javascript-iterator-%E8%A3%BD%E4%BD%9C-6e3900f092c7">https://rs1987.medium.com/javascript-iterator-%E8%A3%BD%E4%BD%9C-6e3900f092c7</a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;一般在使用 loop 的時候會習慣用到 for…of, array forEach …etc, 如果在這些程式碼段裡須搭配非同步(async)的時候會遇到一些問題&lt;/p&gt;
&lt;p&gt;例如: 加了 async/await 沒有作用…&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hexo Theme 排行榜</title>
    <link href="https://flymaple.github.io/blog/2021/06/22/hexo-theme-rank/"/>
    <id>https://flymaple.github.io/blog/2021/06/22/hexo-theme-rank/</id>
    <published>2021-06-22T09:59:24.000Z</published>
    <updated>2021-07-05T06:46:41.785Z</updated>
    
    <content type="html"><![CDATA[<p>一開始只是想找個 hexo theme 來當作 Blog 的模板, 在網上看到有人針對 Github 星數的排行.</p><p>想說乾脆我也來用一個排行的文章, 剛好當作 blog 的一篇文章, 沒想到做著做著遇到好多沒碰過的東西, 原來給自己找了個苦差事呢.</p><span id="more"></span><h2 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h2><ul><li><p>有一個程式負責處理 github repositories data</p><ul><li>Query github repositories with github api</li><li>Export related to blog</li></ul></li><li><p>blog 的文章讀取上面程式來的資料</p></li></ul><h2 id="Implement"><a href="#Implement" class="headerlink" title="Implement"></a>Implement</h2><p>首先來實現資料來源的程式.</p><p>因為要抓取 github 的資料, 所以這裡使用公開且免費的 api, 只是有流量限制而已.</p><p>為了未來重複利用, 這邊直接把 github 相關的東西包成 module, 以便後續(未來)使用.</p><p>並且導入 axios 做為 request 的 library, 對於這個 github module 只是個雛形, 所以 function 沒有做全面, 只有針對要用的部分作一些設計.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;AxiosResponse&#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> _axios <span class="keyword">from</span> <span class="string">&#x27;@axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;RepositoriesResponse&#125; <span class="keyword">from</span> <span class="string">&#x27;./definition&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">FIXME:</span> currently for one topic</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compileToQ</span>(<span class="params">topic: <span class="built_in">string</span>[]</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`topic:<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(topic[<span class="number">0</span>])&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">FIXME:</span> input arguments interface type</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRepositories</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    q,</span></span></span><br><span class="line"><span class="params"><span class="function">    topic,</span></span></span><br><span class="line"><span class="params"><span class="function">    per_page,</span></span></span><br><span class="line"><span class="params"><span class="function">    sort,</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    q: <span class="built_in">string</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    topic: <span class="built_in">string</span>[];</span></span></span><br><span class="line"><span class="params"><span class="function">    per_page: <span class="built_in">number</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    sort: <span class="string">&#x27;stars&#x27;</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>): <span class="title">Promise</span>&lt;<span class="title">RepositoriesResponse</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> axios</span><br><span class="line">        .get&lt;<span class="built_in">any</span>, AxiosResponse&lt;RepositoriesResponse&gt;&gt;(<span class="string">&#x27;/search/repositories&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">params</span>: &#123;</span><br><span class="line">                <span class="attr">q</span>: compileToQ(topic),</span><br><span class="line">                per_page,</span><br><span class="line">                sort,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> res.data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> axios = _axios.create(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;https://api.github.com/&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;<span class="attr">Accept</span>: <span class="string">&#x27;application/vnd.github.v3+json&#x27;</span>&#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> github = &#123;</span><br><span class="line">    getRepositories,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> github;</span><br></pre></td></tr></table></figure><blockquote><p>主要對外公開 getRepositories 方便使用</p></blockquote><hr><p>有了 github module 以後就可以開始寫主程式啦!</p><p>主程式很簡單, 就分為兩個部分:</p><ul><li>查詢 topic: hexo-theme</li><li>將資料寫入檔案<ul><li>將 hexo project 的位置設定好(config file)</li><li>將資料寫入到指定位置</li></ul></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> YAML = <span class="built_in">require</span>(<span class="string">&#x27;json-to-pretty-yaml&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;Repository&#125; <span class="keyword">from</span> <span class="string">&#x27;@github/definition&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&#x27;./.config/hexo-theme-rank.json&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> github <span class="keyword">from</span> <span class="string">&#x27;./github&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getRepositories</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">Repository</span>[]&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">await</span> github.getRepositories(&#123;</span><br><span class="line">        <span class="attr">q</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">topic</span>: [<span class="string">&#x27;hexo-theme&#x27;</span>],</span><br><span class="line">        <span class="attr">per_page</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">sort</span>: <span class="string">&#x27;stars&#x27;</span>,</span><br><span class="line">    &#125;)).items.map(</span><br><span class="line">        <span class="function"><span class="params">repo</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123; ... &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params">data: <span class="built_in">any</span></span>): <span class="title">void</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">void</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> repositories = <span class="keyword">await</span> getRepositories();</span><br><span class="line"></span><br><span class="line">    output(&#123; repositories, &#125;);</span><br><span class="line">&#125;</span><br><span class="line">main();</span><br></pre></td></tr></table></figure><blockquote><p>這裡看到寫出的時候將 json 轉為 yaml, 是因為 hexo 所吃的格式為 yaml</p></blockquote><p>到這邊已經完成一半了, 接下來開始在 blog 中將這份 yaml 資料讀入並且呈現出來.</p><hr><p>到這邊就開始踩雷了!!!</p><ul><li><p>post 怎麼讀取資料?</p><ul><li><p>hexo 有一個叫做 _data 的方式將資料讀入, 並且套用於模板之中(ejs, swig …etc)</p></li><li><p>_data 最後試出有分 global 和 post 的, 但是這只是用於定義在資料夾成面而已, 到最後 compile 都是會被包在 global variable 中, 如果是定義在 post 就會用 post 名稱被分在 global object 中的一個 attribute key 中</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 這是 post 名稱</span></span><br><span class="line">    <span class="attr">&quot;hexo-theme-rank&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;repositories&quot;</span>: [...]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>md 中怎麼寫 script 將這些資料 render 出來?</p><ul><li>找不到, 放棄…</li><li>直接對 next 這個 theme 做客製化, 因為是採用 swig template 又搞了好久的 try error</li></ul><figure class="highlight plaintext"><figcaption><span>post.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; post.content &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;############################################&#125;</span><br><span class="line">&#123;#  Customize: this is for Hexo Theme Rank  #&#125;</span><br><span class="line">&#123;############################################&#125;</span><br><span class="line">&#123;% if post.slug === &#x27;hexo-theme-rank&#x27; %&#125;</span><br><span class="line">    &#123;&#123; hexo_theme_rank_list.render(page) &#125;&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;############################################&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>list.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro render(post) %&#125;</span><br><span class="line">    &#123;% set repos = site.data[&#x27;hexo-theme-rank&#x27;].repositories %&#125;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .&#123;&#123; post.slug &#125;&#125;.line &#123;</span><br><span class="line">            border-bottom: 1px dashed #ccc;</span><br><span class="line">            margin-bottom: 7px;</span><br><span class="line">        &#125;</span><br><span class="line">        .&#123;&#123; post.slug &#125;&#125;.date,</span><br><span class="line">        .&#123;&#123; post.slug &#125;&#125;.description &#123;</span><br><span class="line">            padding-left: 15px;</span><br><span class="line">        &#125;</span><br><span class="line">        .&#123;&#123; post.slug &#125;&#125;.date &#123;</span><br><span class="line">            font-size: 12px;</span><br><span class="line">            color: #737373;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &#123;% for repo in repos.repositories %&#125;</span><br><span class="line">        &lt;div class=&quot;&#123;&#123; post.slug &#125;&#125; line&quot;&gt;</span><br><span class="line">            &lt;a class=&quot;user&quot; href=&quot;...</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&#123;% endmacro %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>這邊真的是雷爆了, 根本不會 swig, 硬是搞出來</p></blockquote></li></ul><hr><p>用完上面這些, 也就是你看到我正在寫文章的時候了, 文章就採用原先 hexo 的方式用 md 來撰寫.</p><p>在搭配 post.swig + list.swig 客製的部分將 repositories 動態 render 出來.</p><blockquote><p>有什麼正規的方式, 快點和我說阿… 難搞死了</p></blockquote><h2 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;一開始只是想找個 hexo theme 來當作 Blog 的模板, 在網上看到有人針對 Github 星數的排行.&lt;/p&gt;
&lt;p&gt;想說乾脆我也來用一個排行的文章, 剛好當作 blog 的一篇文章, 沒想到做著做著遇到好多沒碰過的東西, 原來給自己找了個苦差事呢.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
